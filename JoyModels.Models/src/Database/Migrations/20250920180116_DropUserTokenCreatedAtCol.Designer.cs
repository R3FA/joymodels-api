// <auto-generated />
using System;
using JoyModels.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JoyModels.Models.src.Database.Migrations
{
    [DbContext(typeof(JoyModelsDbContext))]
    [Migration("20250920180116_DropUserTokenCreatedAtCol")]
    partial class DropUserTokenCreatedAtCol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_uca1400_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("JoyModels.Models.Database.Entities.Category", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category_name");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryName" }, "category_name")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPost", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("PostTypeUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("post_type_uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.Property<string>("YoutubeVideoLink")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("youtube_video_link");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PostTypeUuid" }, "post_type_uuid");

                    b.HasIndex(new[] { "UserUuid", "Title" }, "uq_user_title")
                        .IsUnique();

                    b.ToTable("community_posts", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostPicture", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid>("CommunityPostUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("community_post_uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("PictureHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("picture_height");

                    b.Property<string>("PictureLocation")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)")
                        .HasColumnName("picture_location");

                    b.Property<int>("PictureWidth")
                        .HasColumnType("int(11)")
                        .HasColumnName("picture_width");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommunityPostUuid", "PictureLocation" }, "uq_community_post_picture")
                        .IsUnique();

                    b.ToTable("community_post_pictures", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostQuestionSection", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid>("CommunityPostUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("community_post_uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_text");

                    b.Property<Guid>("MessageTypeUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("message_type_uuid");

                    b.Property<Guid>("UserOriginUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_origin_uuid");

                    b.Property<Guid?>("UserTargetUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_target_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommunityPostUuid" }, "community_post_uuid");

                    b.HasIndex(new[] { "MessageTypeUuid" }, "message_type_uuid");

                    b.HasIndex(new[] { "UserOriginUuid" }, "user_origin_uuid");

                    b.HasIndex(new[] { "UserTargetUuid" }, "user_target_uuid");

                    b.ToTable("community_post_question_section", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostReviewType", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("ReviewName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("review_name");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ReviewName" }, "review_name")
                        .IsUnique();

                    b.ToTable("community_post_review_types", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostType", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("CommunityPostName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("community_post_name");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommunityPostName" }, "community_post_name")
                        .IsUnique();

                    b.ToTable("community_post_types", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostUserReview", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid>("CommunityPostUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("community_post_uuid");

                    b.Property<Guid>("ReviewTypeUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("review_type_uuid");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommunityPostUuid" }, "community_post_uuid")
                        .HasDatabaseName("community_post_uuid1");

                    b.HasIndex(new[] { "ReviewTypeUuid" }, "review_type_uuid");

                    b.HasIndex(new[] { "UserUuid", "CommunityPostUuid" }, "uq_user_community_post")
                        .IsUnique();

                    b.ToTable("community_post_user_reviews", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.MessageType", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("MessageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("message_name");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MessageName" }, "message_name")
                        .IsUnique();

                    b.ToTable("message_types", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.Model", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("ModelAvailabilityUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_availability_uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ModelAvailabilityUuid" }, "model_availability_uuid");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.HasIndex(new[] { "UserUuid" }, "user_uuid");

                    b.ToTable("models", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelAvailability", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("AvailabilityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("availability_name");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AvailabilityName" }, "availability_name")
                        .IsUnique();

                    b.ToTable("model_availability", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelCategory", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid>("CategoryUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("category_uuid");

                    b.Property<Guid>("ModelUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryUuid" }, "category_uuid");

                    b.HasIndex(new[] { "ModelUuid", "CategoryUuid" }, "uq_model_category")
                        .IsUnique();

                    b.ToTable("model_categories", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelFaqSection", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_text");

                    b.Property<Guid>("MessageTypeUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("message_type_uuid");

                    b.Property<Guid>("ModelUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_uuid");

                    b.Property<Guid>("UserOriginUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_origin_uuid");

                    b.Property<Guid?>("UserTargetUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_target_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MessageTypeUuid" }, "message_type_uuid")
                        .HasDatabaseName("message_type_uuid1");

                    b.HasIndex(new[] { "ModelUuid" }, "model_uuid");

                    b.HasIndex(new[] { "UserOriginUuid" }, "user_origin_uuid")
                        .HasDatabaseName("user_origin_uuid1");

                    b.HasIndex(new[] { "UserTargetUuid" }, "user_target_uuid")
                        .HasDatabaseName("user_target_uuid1");

                    b.ToTable("model_faq_section", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelPicture", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ModelUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_uuid");

                    b.Property<int>("PictureHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("picture_height");

                    b.Property<string>("PictureLocation")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)")
                        .HasColumnName("picture_location");

                    b.Property<int>("PictureWidth")
                        .HasColumnType("int(11)")
                        .HasColumnName("picture_width");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ModelUuid", "PictureLocation" }, "uq_model_picture")
                        .IsUnique();

                    b.ToTable("model_pictures", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelReview", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ModelUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_uuid");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("review_text");

                    b.Property<Guid>("ReviewTypeUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("review_type_uuid");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ModelUuid" }, "model_uuid")
                        .HasDatabaseName("model_uuid1");

                    b.HasIndex(new[] { "ReviewTypeUuid" }, "review_type_uuid")
                        .HasDatabaseName("review_type_uuid1");

                    b.HasIndex(new[] { "UserUuid", "ModelUuid" }, "uq_user_model_review")
                        .IsUnique();

                    b.ToTable("model_reviews", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelReviewType", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("ReviewName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("review_name");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ReviewName" }, "review_name")
                        .IsUnique()
                        .HasDatabaseName("review_name1");

                    b.ToTable("model_review_types", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.PendingUser", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("char(12)")
                        .HasColumnName("otp_code")
                        .IsFixedLength();

                    b.Property<DateTime>("OtpCreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("otp_created_at");

                    b.Property<DateTime>("OtpExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("otp_expiration_date");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OtpCode" }, "otp_code")
                        .IsUnique();

                    b.HasIndex(new[] { "UserUuid" }, "user_uuid")
                        .HasDatabaseName("user_uuid1");

                    b.ToTable("pending_users", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nick_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<Guid>("UserRoleUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_role_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "NickName" }, "nick_name")
                        .IsUnique();

                    b.HasIndex(new[] { "UserRoleUuid" }, "user_role_uuid");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.UserFollower", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("FollowedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("followed_at");

                    b.Property<Guid>("UserOriginUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_origin_uuid");

                    b.Property<Guid>("UserTargetUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_target_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserOriginUuid", "UserTargetUuid" }, "uq_unique_follow")
                        .IsUnique();

                    b.HasIndex(new[] { "UserTargetUuid" }, "user_target_uuid")
                        .HasDatabaseName("user_target_uuid2");

                    b.ToTable("user_followers", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.UserModelLike", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid>("ModelUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_uuid");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ModelUuid" }, "model_uuid")
                        .HasDatabaseName("model_uuid2");

                    b.HasIndex(new[] { "UserUuid", "ModelUuid" }, "uq_user_model_like")
                        .IsUnique();

                    b.ToTable("user_model_likes", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleName" }, "role_name")
                        .IsUnique();

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Uuid = new Guid("6aa5d268-c259-4054-b604-ff545eaa2f1e"),
                            RoleName = "Undefined"
                        },
                        new
                        {
                            Uuid = new Guid("2107d612-ac38-4390-aeb6-276cf55b42bb"),
                            RoleName = "Unverified"
                        },
                        new
                        {
                            Uuid = new Guid("efd09239-1461-4740-86ae-94ed49137a36"),
                            RoleName = "User"
                        },
                        new
                        {
                            Uuid = new Guid("90051a72-89ea-48ca-8543-43f5843148c8"),
                            RoleName = "Helper"
                        },
                        new
                        {
                            Uuid = new Guid("44b4be39-2884-462a-98c0-cb3b5eb9c3dd"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Uuid = new Guid("c5c8ab92-5933-4122-a804-6533516aeb5d"),
                            RoleName = "Root"
                        });
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("TokenExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("token_expiration_date");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.HasKey("Uuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserUuid", "RefreshToken" }, "uq_user_refresh_token")
                        .IsUnique();

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPost", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.CommunityPostType", "PostTypeUu")
                        .WithMany("CommunityPosts")
                        .HasForeignKey("PostTypeUuid")
                        .IsRequired()
                        .HasConstraintName("community_posts_ibfk_2");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserUu")
                        .WithMany("CommunityPosts")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("community_posts_ibfk_1");

                    b.Navigation("PostTypeUu");

                    b.Navigation("UserUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostPicture", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.CommunityPost", "CommunityPostUu")
                        .WithMany("CommunityPostPictures")
                        .HasForeignKey("CommunityPostUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("community_post_pictures_ibfk_1");

                    b.Navigation("CommunityPostUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostQuestionSection", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.CommunityPost", "CommunityPostUu")
                        .WithMany("CommunityPostQuestionSections")
                        .HasForeignKey("CommunityPostUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("community_post_question_section_ibfk_3");

                    b.HasOne("JoyModels.Models.Database.Entities.MessageType", "MessageTypeUu")
                        .WithMany("CommunityPostQuestionSections")
                        .HasForeignKey("MessageTypeUuid")
                        .IsRequired()
                        .HasConstraintName("community_post_question_section_ibfk_4");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserOriginUu")
                        .WithMany("CommunityPostQuestionSectionUserOriginUus")
                        .HasForeignKey("UserOriginUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("community_post_question_section_ibfk_1");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserTargetUu")
                        .WithMany("CommunityPostQuestionSectionUserTargetUus")
                        .HasForeignKey("UserTargetUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("community_post_question_section_ibfk_2");

                    b.Navigation("CommunityPostUu");

                    b.Navigation("MessageTypeUu");

                    b.Navigation("UserOriginUu");

                    b.Navigation("UserTargetUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostUserReview", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.CommunityPost", "CommunityPostUu")
                        .WithMany("CommunityPostUserReviews")
                        .HasForeignKey("CommunityPostUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("community_post_user_reviews_ibfk_2");

                    b.HasOne("JoyModels.Models.Database.Entities.CommunityPostReviewType", "ReviewTypeUu")
                        .WithMany("CommunityPostUserReviews")
                        .HasForeignKey("ReviewTypeUuid")
                        .IsRequired()
                        .HasConstraintName("community_post_user_reviews_ibfk_3");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserUu")
                        .WithMany("CommunityPostUserReviews")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("community_post_user_reviews_ibfk_1");

                    b.Navigation("CommunityPostUu");

                    b.Navigation("ReviewTypeUu");

                    b.Navigation("UserUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.Model", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.ModelAvailability", "ModelAvailabilityUu")
                        .WithMany("Models")
                        .HasForeignKey("ModelAvailabilityUuid")
                        .IsRequired()
                        .HasConstraintName("models_ibfk_2");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserUu")
                        .WithMany("Models")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("models_ibfk_1");

                    b.Navigation("ModelAvailabilityUu");

                    b.Navigation("UserUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelCategory", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.Category", "CategoryUu")
                        .WithMany("ModelCategories")
                        .HasForeignKey("CategoryUuid")
                        .IsRequired()
                        .HasConstraintName("model_categories_ibfk_2");

                    b.HasOne("JoyModels.Models.Database.Entities.Model", "ModelUu")
                        .WithMany("ModelCategories")
                        .HasForeignKey("ModelUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_categories_ibfk_1");

                    b.Navigation("CategoryUu");

                    b.Navigation("ModelUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelFaqSection", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.MessageType", "MessageTypeUu")
                        .WithMany("ModelFaqSections")
                        .HasForeignKey("MessageTypeUuid")
                        .IsRequired()
                        .HasConstraintName("model_faq_section_ibfk_4");

                    b.HasOne("JoyModels.Models.Database.Entities.Model", "ModelUu")
                        .WithMany("ModelFaqSections")
                        .HasForeignKey("ModelUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_faq_section_ibfk_3");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserOriginUu")
                        .WithMany("ModelFaqSectionUserOriginUus")
                        .HasForeignKey("UserOriginUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_faq_section_ibfk_1");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserTargetUu")
                        .WithMany("ModelFaqSectionUserTargetUus")
                        .HasForeignKey("UserTargetUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("model_faq_section_ibfk_2");

                    b.Navigation("MessageTypeUu");

                    b.Navigation("ModelUu");

                    b.Navigation("UserOriginUu");

                    b.Navigation("UserTargetUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelPicture", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.Model", "ModelUu")
                        .WithMany("ModelPictures")
                        .HasForeignKey("ModelUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_pictures_ibfk_1");

                    b.Navigation("ModelUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelReview", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.Model", "ModelUu")
                        .WithMany("ModelReviews")
                        .HasForeignKey("ModelUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_reviews_ibfk_1");

                    b.HasOne("JoyModels.Models.Database.Entities.ModelReviewType", "ReviewTypeUu")
                        .WithMany("ModelReviews")
                        .HasForeignKey("ReviewTypeUuid")
                        .IsRequired()
                        .HasConstraintName("model_reviews_ibfk_3");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserUu")
                        .WithMany("ModelReviews")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_reviews_ibfk_2");

                    b.Navigation("ModelUu");

                    b.Navigation("ReviewTypeUu");

                    b.Navigation("UserUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.PendingUser", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserUu")
                        .WithMany("PendingUsers")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pending_users_ibfk_1");

                    b.Navigation("UserUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.User", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.UserRole", "UserRoleUu")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleUuid")
                        .IsRequired()
                        .HasConstraintName("users_ibfk_1");

                    b.Navigation("UserRoleUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.UserFollower", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserOriginUu")
                        .WithMany("UserFollowerUserOriginUus")
                        .HasForeignKey("UserOriginUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_followers_ibfk_1");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserTargetUu")
                        .WithMany("UserFollowerUserTargetUus")
                        .HasForeignKey("UserTargetUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_followers_ibfk_2");

                    b.Navigation("UserOriginUu");

                    b.Navigation("UserTargetUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.UserModelLike", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.Model", "ModelUu")
                        .WithMany("UserModelLikes")
                        .HasForeignKey("ModelUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_model_likes_ibfk_2");

                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserUu")
                        .WithMany("UserModelLikes")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_model_likes_ibfk_1");

                    b.Navigation("ModelUu");

                    b.Navigation("UserUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.UserToken", b =>
                {
                    b.HasOne("JoyModels.Models.Database.Entities.User", "UserUu")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_tokens_ibfk_1");

                    b.Navigation("UserUu");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.Category", b =>
                {
                    b.Navigation("ModelCategories");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPost", b =>
                {
                    b.Navigation("CommunityPostPictures");

                    b.Navigation("CommunityPostQuestionSections");

                    b.Navigation("CommunityPostUserReviews");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostReviewType", b =>
                {
                    b.Navigation("CommunityPostUserReviews");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.CommunityPostType", b =>
                {
                    b.Navigation("CommunityPosts");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.MessageType", b =>
                {
                    b.Navigation("CommunityPostQuestionSections");

                    b.Navigation("ModelFaqSections");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.Model", b =>
                {
                    b.Navigation("ModelCategories");

                    b.Navigation("ModelFaqSections");

                    b.Navigation("ModelPictures");

                    b.Navigation("ModelReviews");

                    b.Navigation("UserModelLikes");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelAvailability", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.ModelReviewType", b =>
                {
                    b.Navigation("ModelReviews");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.User", b =>
                {
                    b.Navigation("CommunityPostQuestionSectionUserOriginUus");

                    b.Navigation("CommunityPostQuestionSectionUserTargetUus");

                    b.Navigation("CommunityPostUserReviews");

                    b.Navigation("CommunityPosts");

                    b.Navigation("ModelFaqSectionUserOriginUus");

                    b.Navigation("ModelFaqSectionUserTargetUus");

                    b.Navigation("ModelReviews");

                    b.Navigation("Models");

                    b.Navigation("PendingUsers");

                    b.Navigation("UserFollowerUserOriginUus");

                    b.Navigation("UserFollowerUserTargetUus");

                    b.Navigation("UserModelLikes");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("JoyModels.Models.Database.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
